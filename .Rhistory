ser <- c( first_seg , 2 , second_seg) #series for seperation created
x <- split(cata.rate , ser) # kick the best off the chart
y <- split(k , ser)
again.name <- y[[1]] # ready for the next best : name V.S. rate
again.rate <- x[[1]] # ready for the nest best : rate only
n <- n -1
for(i in 1:n){ # find the next best
if(again.rate[i] < findmore){
findmore <- again.rate[i]
locatemore <- i
}else if(again.rate[i] == findmore){
findmore <- findmore
locatemore <- c(locatemore , i)
}else{
findmore <- findmore
locatemore <- locatemore
}
}
locatemin <- locatemore
cata.rate <- again.rate
k <- again.name
locatemore <- 0
findmore <- 100
}
print(k[locatemin])
}else if(c == 1){
print(name.data[locatemin,1])
}else if(c == "best"){
print(name.data[locatemin,1])
}else if(c == "worst"){##find largest position
findmax <- 0
locatemax <- 0
for(i in 1:n){
if(cata.rate[i] > findmax){
findmax <- cata.rate[i]
locatemax <- i
}else if(cata.rate[i] == findmax){
findmax <- findmax
locatemax <- c(locatemax , i)
}else{
findmax <- findmax
locatemax <- locatemax
}
}
print(name.data[locatemax , 1])
}
}else if(is.null(a[[1]])){ ##if there are no NAs
b <- data.split[1]
k <- as.matrix(b[[1]])
name.data <- k[,c(2,11)] # matrix : name as 1st colums ; rate as 2nd column
n <- nrow(name.data)
cata.rate <- as.numeric(name.data[,2])
for(i in 1:n){
if(cata.rate[i] < findmin){
findmin <- cata.rate[i]
locatemin <- i
}else if(cata.rate[i] == findmin){
findmin <- findmin
locatemin <- c(locatemin , i)
}else{
findmin <- findmin
locatemin <- locatemin
}
}
findmore <- 100
locatemore <- 0
if( is.numeric(c) && c > 1){ #if the request is other than the best
k <- name.data
for(i in 1:(c-1)){
z <- locatemin
first_seg <- c(1)
second_seg <- c(1)
for(i in 1:(z - 2)){
first_seg <- c(first_seg , 1)
}
for(i in 1:(n - z - 1)){
second_seg <- c(second_seg , 1)
}
ser <- c( first_seg , 2 , second_seg) #series for seperation created
x <- split(cata.rate , ser) # kick the best off the chart
y <- split(k , ser)
again.name <- y[[1]] # ready for the next best : name V.S. rate
again.rate <- x[[1]] # ready for the nest best : rate only
n <- n -1
for(i in 1:n){ # find the next best
if(again.rate[i] < findmore){
findmore <- again.rate[i]
locatemore <- i
}else if(again.rate[i] == findmore){
findmore <- findmore
locatemore <- c(locatemore , i)
}else{
findmore <- findmore
locatemore <- locatemore
}
}
locatemin <- locatemore
cata.rate <- again.rate
k <- again.name
locatemore <- 0
findmore <- 100
}
print(k[locatemin])
}else if(c == 1){
print(name.data[locatemin,1])
}else if(c == "best"){
print(name.data[locatemin,1])
}else if(c == "worst"){##find largest position
findmax <- 0
locatemax <- 0
for(i in 1:n){
if(cata.rate[i] > findmax){
findmax <- cata.rate[i]
locatemax <- i
}else if(cata.rate[i] == findmax){
findmax <- findmax
locatemax <- c(locatemax , i)
}else{
findmax <- findmax
locatemax <- locatemax
}
}
print(name.data[locatemax , 1])
}
}
#print(locatemin)
#print(name.data[locatemin,1])
}else if(b == "heart failure"){
target.outcome <- target.state[,17]
numeric <- as.numeric(target.outcome)
true.data <- complete.cases(numeric)
data.split <- split(target.state , true.data)
a <- data.split[2]
if(!is.null(a[[1]])){#if there are NAs
k <- as.matrix(a[[1]])
name.data <- k[,c(2,17)]
n <- nrow(name.data)
cata.rate <- as.numeric(name.data[,2])
for(i in 1:n){
if(cata.rate[i] < findmin){
findmin <- cata.rate[i]
locatemin <- i
}else if(cata.rate[i] == findmin){
findmin <- findmin
locatemin <- c(locatemin , i)
}else{
findmin <- findmin
locatemin <- locatemin
}
}# findmin = lowest rate ; locatemin = position of lowest rate
findmore <- 100
locatemore <- 0
if( is.numeric(c) && c > 1){ #if the request is other than the best
k <- name.data
for(i in 1:(c-1)){
z <- locatemin
first_seg <- c(1)
second_seg <- c(1)
for(i in 1:(z - 2)){
first_seg <- c(first_seg , 1)
}
for(i in 1:(n - z - 1)){
second_seg <- c(second_seg , 1)
}
ser <- c( first_seg , 2 , second_seg) #series for seperation created
x <- split(cata.rate , ser) # kick the best off the chart
y <- split(k , ser)
again.name <- y[[1]] # ready for the next best : name V.S. rate
again.rate <- x[[1]] # ready for the nest best : rate only
n <- n -1
for(i in 1:n){ # find the next best
if(again.rate[i] < findmore){
findmore <- again.rate[i]
locatemore <- i
}else if(again.rate[i] == findmore){
findmore <- findmore
locatemore <- c(locatemore , i)
}else{
findmore <- findmore
locatemore <- locatemore
}
}
locatemin <- locatemore
cata.rate <- again.rate
k <- again.name
locatemore <- 0
findmore <- 100
}
print(k[locatemin])
}else if(c == 1){
print(name.data[locatemin,1])
}else if(c == "best"){
print(name.data[locatemin,1])
}else if(c == "worst"){##find largest position
findmax <- 0
locatemax <- 0
for(i in 1:n){
if(cata.rate[i] > findmax){
findmax <- cata.rate[i]
locatemax <- i
}else if(cata.rate[i] == findmax){
findmax <- findmax
locatemax <- c(locatemax , i)
}else{
findmax <- findmax
locatemax <- locatemax
}
}
print(name.data[locatemax , 1])
}
}else if(is.null(a[[1]])){ # if there is no NAs
b <- data.split[1]
k <- as.matrix(b[[1]])
name.data <- k[,c(2,23)]
n <- nrow(name.data)
cata.rate <- as.numeric(name.data[,2])
for(i in 1:n){
if(cata.rate[i] < findmin){
findmin <- cata.rate[i]
locatemin <- i
}else if(cata.rate[i] == findmin){
findmin <- findmin
locatemin <- c(locatemin , i)
}else{
findmin <- findmin
locatemin <- locatemin
}
}#findmin = lowest rate ; locatemin = position of lowest rate
findmore <- 100
locatemore <- 0
if( is.numeric(c) && c > 1){ #if the request is other than the best
k <- name.data
for(i in 1:(c-1)){
z <- locatemin
first_seg <- c(1)
second_seg <- c(1)
for(i in 1:(z - 2)){
first_seg <- c(first_seg , 1)
}
for(i in 1:(n - z - 1)){
second_seg <- c(second_seg , 1)
}
ser <- c( first_seg , 2 , second_seg) #series for seperation created
x <- split(cata.rate , ser) # kick the best off the chart
y <- split(k , ser)
again.name <- y[[1]] # ready for the next best : name V.S. rate
again.rate <- x[[1]] # ready for the nest best : rate only
n <- n -1
for(i in 1:n){ # find the next best
if(again.rate[i] < findmore){
findmore <- again.rate[i]
locatemore <- i
}else if(again.rate[i] == findmore){
findmore <- findmore
locatemore <- c(locatemore , i)
}else{
findmore <- findmore
locatemore <- locatemore
}
}
locatemin <- locatemore
cata.rate <- again.rate
k <- again.name
locatemore <- 0
findmore <- 100
}
print(k[locatemin])
}else if(c == 1){
print(name.data[locatemin,1])
}else if(c == "best"){
print(name.data[locatemin,1])
}else if(c == "worst"){##find largest position
findmax <- 0
locatemax <- 0
for(i in 1:n){
if(cata.rate[i] > findmax){
findmax <- cata.rate[i]
locatemax <- i
}else if(cata.rate[i] == findmax){
findmax <- findmax
locatemax <- c(locatemax , i)
}else{
findmax <- findmax
locatemax <- locatemax
}
}
print(name.data[locatemax , 1])
}
}
#print(name.data[locatemin,1])
}else if(b == "pneumonia"){
target.outcome <- target.state[,23]
numeric <- as.numeric(target.outcome)
true.data <- complete.cases(numeric)
data.split <- split(target.state , true.data)
a <- data.split[2]
#print(a)
if(!is.null(a[[1]])){
k <- as.matrix(a[[1]])
name.data <- k[,c(2,23)]
n <- nrow(name.data)
cata.rate <- as.numeric(name.data[,2])
for(i in 1:n){
if(cata.rate[i] < findmin){
findmin <- cata.rate[i]
locatemin <- i
}else if(cata.rate[i] == findmin){
findmin <- findmin
locatemin <- c(locatemin , i)
}else{
findmin <- findmin
locatemin <- locatemin
}
}#findmin = lowest rate ; locatemin = position of lowest rate
findmore <- 100
locatemore <- 0
if( is.numeric(c) && c > 1){ #if the request is other than the best
k <- name.data
for(i in 1:(c-1)){
z <- locatemin
first_seg <- c(1)
second_seg <- c(1)
for(i in 1:(z - 2)){
first_seg <- c(first_seg , 1)
}
for(i in 1:(n - z - 1)){
second_seg <- c(second_seg , 1)
}
ser <- c( first_seg , 2 , second_seg) #series for seperation created
x <- split(cata.rate , ser) # kick the best off the chart
y <- split(k , ser)
again.name <- y[[1]] # ready for the next best : name V.S. rate
again.rate <- x[[1]] # ready for the nest best : rate only
n <- n -1
for(i in 1:n){ # find the next best
if(again.rate[i] < findmore){
findmore <- again.rate[i]
locatemore <- i
}else if(again.rate[i] == findmore){
findmore <- findmore
locatemore <- c(locatemore , i)
}else{
findmore <- findmore
locatemore <- locatemore
}
}
locatemin <- locatemore
cata.rate <- again.rate
k <- again.name
locatemore <- 0
findmore <- 100
}
print(k[locatemin])
}else if(c == 1){
print(name.data[locatemin,1])
}else if(c == "best"){
print(name.data[locatemin,1])
}else if(c == "worst"){##find largest position
findmax <- 0
locatemax <- 0
for(i in 1:n){
if(cata.rate[i] > findmax){
findmax <- cata.rate[i]
locatemax <- i
}else if(cata.rate[i] == findmax){
findmax <- findmax
locatemax <- c(locatemax , i)
}else{
findmax <- findmax
locatemax <- locatemax
}
}
print(name.data[locatemax , 1])
}
}else if(is.null(a[[1]])){
b <- data.split[1]
k <- as.matrix(b[[1]])
name.data <- k[,c(2,23)]
n <- nrow(name.data)
cata.rate <- as.numeric(name.data[,2])
for(i in 1:n){
if(cata.rate[i] < findmin){
findmin <- cata.rate[i]
locatemin <- i
}else if(cata.rate[i] == findmin){
findmin <- findmin
locatemin <- c(locatemin , i)
}else{
findmin <- findmin
locatemin <- locatemin
}
}#findmin = lowest rate ; locatemin = position of lowest rate
findmore <- 100
locatemore <- 0
if( is.numeric(c) && c > 1){ #if the request is other than the best
k <- name.data
for(i in 1:(c-1)){
z <- locatemin
first_seg <- c(1)
second_seg <- c(1)
for(i in 1:(z - 2)){
first_seg <- c(first_seg , 1)
}
for(i in 1:(n - z - 1)){
second_seg <- c(second_seg , 1)
}
ser <- c( first_seg , 2 , second_seg) #series for seperation created
x <- split(cata.rate , ser) # kick the best off the chart
y <- split(k , ser)
again.name <- y[[1]] # ready for the next best : name V.S. rate
again.rate <- x[[1]] # ready for the nest best : rate only
n <- n -1
for(i in 1:n){ # find the next best
if(again.rate[i] < findmore){
findmore <- again.rate[i]
locatemore <- i
}else if(again.rate[i] == findmore){
findmore <- findmore
locatemore <- c(locatemore , i)
}else{
findmore <- findmore
locatemore <- locatemore
}
}
locatemin <- locatemore
cata.rate <- again.rate
k <- again.name
locatemore <- 0
findmore <- 100
}
print(k[locatemin])
}else if(c == 1){
print(name.data[locatemin,1])
}else if(c == "best"){
print(name.data[locatemin,1])
}else if(c == "worst"){##find largest position
findmax <- 0
locatemax <- 0
for(i in 1:n){
if(cata.rate[i] > findmax){
findmax <- cata.rate[i]
locatemax <- i
}else if(cata.rate[i] == findmax){
findmax <- findmax
locatemax <- c(locatemax , i)
}else{
findmax <- findmax
locatemax <- locatemax
}
}
print(name.data[locatemax , 1])
}
}
#print(locatemin)
#print(name.data[locatemin,1])
}else{
stop("invalid state")
}
}
}
rankhospital("TX" , "heart failure" , 4)
rankhospital("TX" , "heart attack" , 4)
rankhospital("TX" , "heart attack" , 50000)
rankhospital("MD" , "heart attack" , "worst")
rankhospital("TX" , "heart failure" , 4)
rankhospital("TX" , "heart failure" , 2)
rankhospital("TX" , "heart failure" , 1)
rankhospital("TX" , "heart failure" , "best")
rankhospital("TX" , "heart failure" , 3)
rankhospital("TX" , "heart failure" , 3)
rankhospital("TX" , "heart failure" , 4)
source("rankhospital.r")
rankhospital("TX" , "heart attack" , "best")
rankhospital("TX" , "heart failure" , "best")
rankhospital("MD" , "heart failure" , "best")
rankhospital("MD" , "heart attack" , "best")
rankhospital("MD" , "pneumonia" , "best")
rankhospital("MDa" , "pneumonia" , "best")
rankhospital("MD" , "apneumonia" , "best")
rankhospital("MD" , "apneumonia" , "best")
source("rankhospital.r")
rankhospital("TX" , "heart failure" , 3)
rankhospital("TX" , "heart failure" , 4)
str(order)
dir()
sourse("what???.r")
source("what???.r")
source("what???.r")
x <- matrix(1:9,3,3)
y <- makeCacheMatrixinverse(x)
cacheSolve(y)
y
cacheSolve(y)
cacheSolve(x)
y
x
y
z <- cacheSolve(y)
x <- matrix(1:4,2,2)
y <- makeCacheMatrixinverse(x)
cacheSolve(y)
getwd
getwd()
setwd("~")
dir()
setwd("~/ProgrammingAssignment2")
dir()
source("cachematrix.r")
source("cachematrix.r")
x
y <- makeCacheMatrix(x)
cacheSolve(y)
